AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with private subnets in two availability zones'
Parameters:
  PrivateSubnet:
    Description: Private Subnet to Attach NAT Gateway.
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-08afb76ea37f066b5'

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: c5.xlarge
    AllowedValues: [t2.micro, c5.xlarge]
    ConstraintDescription: Please choose a valid instance type.

  SSHKeyName:
    Description: EC2 instance type 
    Type: String
    Default: 'CloudFormation'
    ConstraintDescription: Please choose a valid KeyName

  VolumeSize:
    Description: size of volume
    Type: Number
    Default: 10
    ConstraintDescription: Please choose a valid Number
    AllowedValues: [10, 15, 20, 30, 40, 50]

  IOPS:
    Description: total ipos
    Type: Number
    Default: 100
    ConstraintDescription: Please choose a valid Number
    AllowedValues: [100, 200, 500, 1000]

  ImageId:
    Type: String
    Description: 'value for region singapore. If you using other version please choose right'
    Default: 'ami-04ff9e9b51c1f62ca'
    
  SecurityGroupIds:
    Description: launch-wizard3
    Type: AWS::EC2::SecurityGroup::Id
    Default: 'sg-07ea85405a716eee4'

        
Resources:
  EC2Example:
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT4M
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      IamInstanceProfile: "EC2CodeDeploy"
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "SecurityGroupIds"
          SubnetId: 
            Ref: "PrivateSubnet"
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: !Ref IOPS
            DeleteOnTermination: false
            VolumeSize: !Ref VolumeSize            
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - "apt-get -y aws-cfn-bootstrap\n"
            - "cd /home/ubuntu\n"
            - "sudo rm -rf /var/lib/cloud/instance\n"
            - "sudo rm -rf /var/lib/cloud/instances\n"
            - "apt install net-tools\n"     
            - "apt-get -y update\n"
            - "apt install -y ruby-full\n"
            - "{\n"
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - !Ref 'WaitHandle'
            - "'\n"
            - "  exit 1\n"
            - "}\n"
            - "apt-get-y install wget\n"
            - "wget https://aws-codedeploy-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/latest/install\n"
            - "chmod +x ./install\n"
            - "./install auto\n"
            - /opt/aws/bin/cfn-signal -e 0
            - "apt-get install -y python-pip\n"
            - "pip install awscli\n"
            - "apt-get remove docker docker-engine docker.io\n"
            - "apt-get update\n"
            - "apt install -y docker.io\n"
            - "snap install docker\n"
            - /opt/aws/bin/cfn-signal -e 0 -r "UserData setup complete."
              '
            - !Ref 'WaitHandle'
            - "'\n"
            
      Tags:
      - Key: 'MISPCF'
        Value: 'MISPCFInstance'
          
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'WaitHandle'
      Timeout: '300'
        
